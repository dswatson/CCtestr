% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ref_pacs.R
\name{ref_pacs}
\alias{ref_pacs}
\title{Generate Reference PAC Scores}
\usage{
ref_pacs(dat, max_k = 3, ref_method = "pc_norm", B = 100, reps = 100,
  distance = "euclidean", cluster_alg = "hclust",
  hclust_method = "average", p_item = 0.8, p_feature = 1,
  wts_item = NULL, wts_feature = NULL, pac_window = c(0.1, 0.9),
  seed = NULL, parallel = TRUE)
}
\arguments{
\item{dat}{Probe by sample omic data matrix. Data should be filtered and
normalized prior to analysis.}

\item{max_k}{Maximum cluster number to evaluate.}

\item{ref_method}{How should null data be generated? Options include \code{
pc_norm}, \code{pc_unif}, \code{cholesky}, \code{range}, and \code{
permute}. See Details.}

\item{B}{Number of null datasets to generate.}

\item{reps}{Number of subsamples to draw for consensus clustering.}

\item{distance}{Distance metric for clustering. Supports all methods
available in \code{\link[stats]{dist}} and \code{\link[vegan]{vegdist}},
as well as those implemented in the \code{bioDist} package.}

\item{cluster_alg}{Clustering algorithm to implement. Currently supports
hierarchical (\code{"hclust"}), \emph{k}-means (\code{"kmeans"}), and
\emph{k}-medoids (\code{"pam"}).}

\item{hclust_method}{Method to use if \code{cluster_alg = "hclust"}. See \code{
\link[stats]{hclust}}.}

\item{p_item}{Proportion of items to include in each subsample.}

\item{p_feature}{Proportion of features to include in each subsample.}

\item{wts_item}{Optional vector of item weights.}

\item{wts_feature}{Optional vector of feature weights.}

\item{pac_window}{Lower and upper bounds for the consensus index sub-interval
over which to calculate the PAC. Must be on (0, 1).}

\item{seed}{Optional seed for reproducibility.}

\item{parallel}{If a parallel backend is loaded and available, should the 
function use it? Highly advisable if hardware permits.}
}
\value{
A matrix with \code{B} rows and \code{max_k - 1} columns containing 
null PAC scores for each cluster number \emph{k}.
}
\description{
This function computes reference PAC scores from simulated or permuted data 
based on an input matrix.
}
\details{
Suitable reference PAC scores are essential to test the magnitude and 
significance of cluster stability. This function generates \emph{B} simulated 
or permuted datasets with similar properties to \code{dat}, but with random 
sample cluster structure. The expected value of \emph{k} for these datasets 
is therefore 1, and PAC scores for each \emph{k} form a null distribution 
that tends toward normality as \emph{B} increases. 

\code{ref_pacs} currently supports five methods for generating null datasets 
from a given input matrix: 

\itemize{
  \item \code{"pc_norm"} simulates the principal components by taking random 
    draws from a normal distribution with variance equal to the true 
    eigenvalues. Data are subsequently backtransformed to their original 
    dimensions by cross-multiplication with the true eigenvector matrix.
  \item \code{"pc_unif"} simulates the principal components by taking random 
    draws from a uniform distribution with ranges equal to those of the true 
    principal components. Data are subsequently backtransformed to their 
    original dimensions by cross-multiplication with the true eigenvector 
    matrix. 
  \item \code{"cholesky"} simulates random Gaussian noise around the Cholesky
    decomposition of the feature-wise covariance matrix's nearest positive
    definite approximation.
  \item \code{"range"} selects random values uniformly from each feature's 
    observed range. 
  \item \code{"permute"} shuffles the values of each feature.
}

The first three options use different forms of matrix decomposition to 
preserve the feature-wise covariance while scrambling the item-wise 
covariance. \code{"pc_norm"} tends to generate the most realistic null data, 
while \code{"pc_unif"} is more likely to guarantee a true \emph{k} of 1. Both 
methods are fast and stable when features outnumber items. When items 
outnumber features, \code{ref_method} defaults to \code{"cholesky"}, which 
takes longer to compute, but is better suited for such cases. The final two 
options are included for convenience, but do not preserve featurewise 
covariance, which may bias results. 

Just as reference PAC distributions are the theoretical core of the CCtestr 
approach to cluster validation, \code{ref_pacs} is the computational core 
of the \code{CCtestr} package. This function can take some time to execute, 
and should ideally be run in parallel, especially with large datasets.
}
\examples{
mat <- matrix(rnorm(1000 * 12), nrow = 1000, ncol = 12)
rp <- ref_pacs(mat, ref_method = "pc_norm")

}
